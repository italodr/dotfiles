#!/usr/bin/env zsh

alias currentBranch='git rev-parse --abbrev-ref HEAD'

alias gaa='git add -u'
alias gba='git branch -a'
alias gbd='git branch -D'
alias gcm='git commit -m'
alias gcf='gaa && gcm "fix: resolve conflicts"'
alias gco='git checkout'
alias gfa='git fetch --all --prune'
alias gpl='git pull origin $(currentBranch)'
alias gps='git push origin $(currentBranch)'
alias gpa='gps & git push origin --tags'
alias gsb='git status -sb'
alias gfix='git commit --fixup HEAD'
alias ginit='git init && git add . && gcm "Initial commit"'
alias glog='git log --all --decorate --oneline --graph'
alias gcache='git rm -r --cached .'
alias gconf='git diff --name-only --diff-filter=U'
alias gfuck='git reset --soft HEAD^ && git reset'
alias gbr='for k in `git branch -r | perl -pe "s/^..(.*?)( ->.*)?$/\1/"`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k -- | head -n 1`\\t$k; done | sort -r'
alias gtg='git for-each-ref --format="%(color:green)%(refname:short) %(color:red)%(taggerdate:relative)" --sort="taggerdate" refs/tags'

alias python='python3'
alias pypip='python -m pip'
alias python:create='python -m venv'
alias python:requirements='pip freeze > requirements.txt'

alias personio='bash ~/.personio.sh'

alias r!="exec zsh -l"
alias reload='. ~/.zshrc'

# Convert images into webp
alias towebp='function _towebp(){ folder="$1"; shift; for file in "$folder"/*.png; do cwebp "$file" -o "${file%.png}.webp" "$@"; done }; _towebp'

# Sleep mac
alias sleep!="pmset sleepnow"

# FunciÃ³n para respaldar bases de datos SQLite
backup_sqlite() {
    local DEFAULT_DB_PATH="./database.sqlite"
    local DEFAULT_BACKUP_DIR="$HOME/Library/CloudStorage/GoogleDrive-italodr@gmail.com/My Drive/Backups"

    local DB_PATH="${1:-$DEFAULT_DB_PATH}"
    local BACKUP_DIR="${2:-$DEFAULT_BACKUP_DIR}"
    local CURRENT_DIR=$(basename "$PWD")
    local FULL_BACKUP_DIR="$BACKUP_DIR/$CURRENT_DIR"

    mkdir -p "$FULL_BACKUP_DIR"

    local TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
    local BACKUP_FILE="$FULL_BACKUP_DIR/backup_$TIMESTAMP.sqlite.gz"

    gzip -c "$DB_PATH" > "$BACKUP_FILE"

    if [[ $? -eq 0 ]]; then
        echo "Copia de seguridad comprimida creada en: $BACKUP_FILE"
    else
        echo "Error al crear la copia de seguridad"
        return 1
    fi
}

# Alias para facilitar el uso
alias backup="backup_sqlite"

# Convert to mp4
tomp4() {
  ffmpeg -protocol_whitelist file,http,https,tcp,tls -i "$1"."$2" -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 "$1".mp4
}
